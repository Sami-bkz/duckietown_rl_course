/opt/conda/envs/duckietownrl/lib/python3.8/site-packages/gymnasium/envs/registration.py:485: UserWarning: [33mWARN: The environment creator metadata doesn't include `render_modes`, contains: ['render.modes', 'video.frames_per_second'][0m
  logger.warn(
INFO:duckietown_world: data: [38;5;127m/opt/conda/envs/duckietownrl/lib/python3.8/site-packages/duckietown_world/data[0m
ppo.py:214: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  agent.load_state_dict(torch.load("/home/duckietown_rl_course/duckiereal/imitation_learning/models_imitation/behavioral_cloning_ppo.pt"))
/opt/conda/envs/duckietownrl/lib/python3.8/site-packages/gymnasium/utils/passive_env_checker.py:174: UserWarning: [33mWARN: The default seed argument in `Env.reset` should be `None`, otherwise the environment will by default always be deterministic. Actual default: seed=429[0m
  logger.warn(
Iteration 1/4882
	Sampling in progress...
	Evaluation in progress...
/opt/conda/envs/duckietownrl/lib/python3.8/site-packages/gymnasium/envs/registration.py:485: UserWarning: [33mWARN: The environment creator metadata doesn't include `render_modes`, contains: ['render.modes', 'video.frames_per_second'][0m
  logger.warn(
Traceback (most recent call last):
  File "ppo.py", line 318, in <module>
    eval_score = evaluate_ppo(agent, args.env_id, seed=args.seed)
  File "/home/duckietown_rl_course/duckiesim/rl/rl_utils.py", line 73, in evaluate_ppo
    obs, reward, done, _, _ = env.step(action)
  File "/opt/conda/envs/duckietownrl/lib/python3.8/site-packages/gymnasium/wrappers/common.py", line 125, in step
    observation, reward, terminated, truncated, info = self.env.step(action)
  File "/opt/conda/envs/duckietownrl/lib/python3.8/site-packages/gymnasium/wrappers/common.py", line 393, in step
    return super().step(action)
  File "/opt/conda/envs/duckietownrl/lib/python3.8/site-packages/gymnasium/core.py", line 322, in step
    return self.env.step(action)
  File "/opt/conda/envs/duckietownrl/lib/python3.8/site-packages/gymnasium/wrappers/common.py", line 285, in step
    return self.env.step(action)
  File "/home/duckietown_rl_course/duckietownrl/gym_duckietown/envs/duckietown_discrete_env.py", line 97, in step
    obs, reward, done, info = Simulator.step(self, vels)
  File "/home/duckietown_rl_course/duckietownrl/gym_duckietown/simulator.py", line 2295, in step
    self.update_physics(action)
  File "/home/duckietown_rl_course/duckietownrl/gym_duckietown/simulator.py", line 1826, in update_physics
    self.cur_pos, self.cur_angle = _update_pos(self, action)
  File "/home/duckietown_rl_course/duckietownrl/gym_duckietown/simulator.py", line 2749, in _update_pos
    self.state = self.state.integrate(self.delta_time, action)
  File "/opt/conda/envs/duckietownrl/lib/python3.8/site-packages/duckietown_world/world_duckietown/dynamics_delay.py", line 80, in integrate
    state2 = self.state.integrate(dt, use_commands)
  File "/opt/conda/envs/duckietownrl/lib/python3.8/site-packages/duckietown_world/world_duckietown/pwm_dynamics.py", line 199, in integrate
    s1 = GenericKinematicsSE2.integrate(self, dt, commands_se2)
  File "/opt/conda/envs/duckietownrl/lib/python3.8/site-packages/duckietown_world/world_duckietown/generic_kinematics.py", line 40, in integrate
    diff = geo.SE2.group_from_algebra(dt * v)  # exponential map
  File "/opt/conda/envs/duckietownrl/lib/python3.8/site-packages/geometry/manifolds/special_euclidean_group.py", line 97, in group_from_algebra
    return SE2_from_se2(a)
  File "/opt/conda/envs/duckietownrl/lib/python3.8/site-packages/geometry/poses.py", line 346, in SE2_from_se2
    return combine_pieces(R, t, t * 0, 1)
KeyboardInterrupt
